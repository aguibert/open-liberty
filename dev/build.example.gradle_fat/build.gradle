/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply plugin: 'java'
	
repositories {
    mavenCentral()
    ivy {
    	url "../cnf/local"
    }
}
	
sourceSets {
	main {
		java {
			srcDirs = ['test-applications/app1/src']
		}
	}
	test {
		java {
			srcDirs = ['fat/src']
		}
	}
}

task setupAutoFVT {
	doLast {
		def autoFvtDir = new File(project.buildDir, 'libs/autoFVT')
		File publishDir = new File(autoFvtDir, 'publish')
		
		autoFvtDir.deleteDir()
		autoFvtDir.mkdir()
		
	    // Copy the static autoFVT-defaults
	    copy {
	      from new File('../fattest.simplicity' , '/autoFVT-defaults')
	      include '**/*'
	      into autoFvtDir
	    }

	    // Copy the dynamic autoFVT-defaults
	    copy {
	      from new File('../fattest.simplicity/build/libs', '/autoFVT-defaults')
	      include '**/*'
	      into autoFvtDir
	    }
	    // Copy the published files
	    copy {
	      from project.file('publish/files'), new File(publishDir, 'files')
	      include '**/*'
	      into new File(autoFvtDir, 'lib/LibertyFATTestFiles')
	    }
	    // Copy the publish directory (minus the 'files' directory)
	    copy {
	      from project.file('publish')
	      include '**/*'
	      exclude 'files'
	      into publishDir
	    }
	    // Copy all non-java app resourecs, such as *.html or *.jsp
	    copy {
	      includeEmptyDirs = false
	      from projectDir
	      into autoFvtDir
	      include 'test-applications/**', 'test-bundles/**', 'test-resourceadapters/**'
	      exclude '**/*.java'
	    }
		
	    // Produce a list of features tested by this FAT
	    def featureDeps = [] as Set
	    // Include features added explictly via bnd.bnd
	    def testedFeatures = null // TODO bnd('tested.features')
	    if(testedFeatures != null)
	      testedFeatures.split(',').each{ featureDeps.add(it.trim().toLowerCase()) }
	    // Scan publish/ dir for features
	    if(publishDir.exists()) {
	      publishDir.eachFileRecurse(groovy.io.FileType.FILES) {
	        if(it.name.endsWith('.xml')) {
	          file(it).eachLine { line ->
	            if(line.contains("<feature>")) {
	              def feature = (line =~ /.*<feature>(.*)<\/feature>.*/)[0][1]
	              featureDeps.add(feature.trim().toLowerCase())
	            }
	          }
	        }
	      }
	    }
	    // Scan FAT files dir for features
	    if(new File(autoFvtDir, 'lib/LibertyFATTestFiles').exists()){
	      new File(autoFvtDir, 'lib/LibertyFATTestFiles').eachFileRecurse(groovy.io.FileType.FILES) {
	        if(it.name.endsWith('.xml')) {
	          file(it).eachLine { line ->
	            if(line.contains("<feature>")) {
	              def feature = (line =~ /.*<feature>(.*)<\/feature>.*/)[0][1]
	              featureDeps.add(feature.trim().toLowerCase())
	            }
	          }
	        }
	      }
	    }
	    if(featureDeps.size() > 0) {
	      println "This FAT tests the following features: " + featureDeps
	      def fatDeps = new groovy.json.JsonBuilder()
	      def root = fatDeps { 
	    	  "feature-deps" featureDeps
	      }
	      new File(autoFvtDir, 'fat-metadata.json').write(new groovy.json.JsonBuilder(root).toPrettyString())
	    } else {
	      println "This FAT does not test any features."
	    }
	}
}

test {
	dependsOn setupAutoFVT
	workingDir 'build/libs/autoFVT'
	filter {
		includeTestsMatching "*.FATSuite"
	}
	afterTest { desc, result -> 
		logger.lifecycle("  [" + result + "]  " + desc.className + "  " + desc.name)
	}
	testLogging {
		showStandardStreams = true
	}
}

dependencies {
	// Things that are standard to all FATs
  compile 'org.jboss.shrinkwrap:shrinkwrap-api:1.2.3',
    'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.2.3',
  	'test:fattest.simplicity:1.+',
  	'com.ibm.ws.componenttest:public.api:1.0.0',
  	'test:com.ibm.ws.componenttest:1.+',
  	'junit:junit:4.12',
  	'javax.json:javax.json-api:1.0',
  	'org.glassfish:javax.json:1.0.4',
  	// things the test app uses
  	'dev:com.ibm.websphere.javaee.servlet.3.1:1.+',
  	'commons-logging:commons-logging:1.1.3'
}

configurations {
	runtime {
		extendsFrom compile
	}
}
